# Generated by Django 5.1.6 on 2025-02-22 18:42
from django.db import migrations
from django.utils import timezone
from datetime import timedelta
import random
from django.contrib.auth.hashers import make_password

def create_sample_data(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    Category = apps.get_model('budget', 'Category')
    Transaction = apps.get_model('budget', 'Transaction')
    Budget = apps.get_model('budget', 'Budget')
    SavingsGoal = apps.get_model('budget', 'SavingsGoal')
    UserProfile = apps.get_model('budget', 'UserProfile')

    default_categories=[
        'Home & Utilities',
        'Transportation',
        'Groceries',
        'Dining',
        'Entertainment',
        'Insurance',
        'Travel',
        'Personal & Family Care',
        'Education',
        'Health & Fitness',
        'Other'
    ]

    for category_name in default_categories:
        Category.objects.create(name=category_name)

    categories = list(Category.objects.all())

    # Create a user
    user, created = User.objects.get_or_create(
        username="demo_user",
        defaults={
            'email': 'demo@pepito.com',
            'password': make_password('demo1234'),
            'is_active': True,
        }
    )


    # Create a user profile

    UserProfile.objects.get_or_create(
        user=user,
        defaults={
            'monthly_income': 5000,
            'currency': 'USD',
        }
    )

    current_date = timezone.now().date().replace(day=1)
    for category in categories:
        Budget.objects.get_or_create(
            user=user,
            category=category,
            defaults={
                'amount': random.randint(100, 1000),
                'month': current_date
            }
        )

    existing_transactions = Transaction.objects.filter(user=user).count()
    if existing_transactions == 0:
        for _ in range(20):
            Transaction.objects.create(
                user=user,
                category=random.choice(categories),
                spend=random.uniform(1, 100),
                date=timezone.now().date() - timedelta(days=random.randint(1, 30))
            )

    savings_goals = [
        {'name': 'Emergency Fund', 'target': 5000},
        {'name': 'Vacation', 'target': 2000},
        {'name': 'New Laptop', 'target': 1500},
    ]

    for goal in savings_goals:
        SavingsGoal.objects.get_or_create(
            user=user,
            name=goal['name'],
            defaults={
                'target_amount': goal['target'],
                'current_amount': random.uniform(0, goal['target']),
                'target_date': timezone.now().date() + timedelta(days=180)
            }
        )

def remove_sample_data(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    Category = apps.get_model('budget', 'Category')
    User.objects.filter(username='demo_user').delete()
    Category.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('budget', '0005_alter_userprofile_monthly_income'),
    ]

    operations = [
        migrations.RunPython(create_sample_data, remove_sample_data),
    ]